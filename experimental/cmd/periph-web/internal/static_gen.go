// Copyright 2018 The Periph Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// +build ignore

// static_gen generates static_prod.go from files in static/.

package main

import (
	"bytes"
	"errors"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"os/exec"
	"strconv"
	"strings"
	"text/template"
)

const tmpl = `// go run internal/static_gen.go -o static_prod.go
// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT

// +build !debug

package main

const cacheControlContent = "Cache-Control:public,max-age=300"

func getContent(path string) []byte {
	return staticContent[path]
}

var staticContent = map[string][]byte{
{{range .}}	{{index . 0}}: {{index . 1}},
{{end}}}
`

func pipe(cmd []string, in io.Reader) ([]byte, error) {
	c := exec.Command(cmd[0], cmd[1:]...)
	c.Stdin = in
	c.Stderr = os.Stderr
	r, err := c.Output()
	if err != nil {
		err = fmt.Errorf("%s: %v", strings.Join(cmd, " "), err)
	}
	return r, err
}

func mainImpl() error {
	output := flag.String("o", "", "output file, else stdout")
	flag.Parse()
	if flag.NArg() != 0 {
		return errors.New("unknown argument")
	}

	data := [][2]string{}
	r, err := ioutil.ReadFile("static/index.html")
	if err != nil {
		return err
	}
	if r, err = pipe([]string{"minify", "--type", "html"}, bytes.NewReader(r)); err != nil {
		if strings.HasSuffix(err.Error(), exec.ErrNotFound.Error()) {
			return errors.New("Please install minify with: go get github.com/tdewolff/minify/cmd/minify")
		}
		return err
	}
	data = append(data, [2]string{strconv.Quote("static/index.html"), fmt.Sprintf("[]byte(%q)", r)})

	if r, err = ioutil.ReadFile("static/favicon.ico"); err != nil {
		return err
	}
	data = append(data, [2]string{strconv.Quote("static/favicon.ico"), fmt.Sprintf("[]byte(%q)", r)})

	t, err := template.New("").Parse(tmpl)
	if err != nil {
		return err
	}
	var buf bytes.Buffer
	if err := t.Execute(&buf, data); err != nil {
		return err
	}
	if r, err = pipe([]string{"gofmt", "-s"}, &buf); err != nil {
		return err
	}
	if *output != "" {
		return ioutil.WriteFile(*output, r, 0666)
	}
	_, err = os.Stdout.Write(r)
	return err
}

func main() {
	if err := mainImpl(); err != nil {
		fmt.Fprintf(os.Stderr, "gen: %v\n", err)
		os.Exit(1)
	}
}
